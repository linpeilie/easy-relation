import{_ as l,X as n,Y as i,Z as o,$ as e,a0 as c,a2 as t,a1 as a,C as r}from"./framework-6ad2459b.js";const d={},p=a(`<p>项目提供了配置类：<code>RelationProperties</code>，会在声明 <code>InjectRelation</code> 实例时传入，所以，当需要自定义参数时，也需要将自定义实现传递给 <code>InjectRelation</code>。</p><p>当使用 SpringBoot 时，还可以在项目配置文件中指定相应的配置。</p><p>默认配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">easy</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">relation</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">default-exception-strategy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">WARN</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">redis</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">key-prefix</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;easii:&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">serialize-type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">JACKSON</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-exception-strategy" tabindex="-1"><a class="header-anchor" href="#default-exception-strategy" aria-hidden="true">#</a> default-exception-strategy</h3><ul><li>描述：默认的转换异常处理策略</li><li>类型：<code>RelationExceptionStrategy</code> 枚举</li><li>默认值：<code>THROW</code></li><li>可选值： <ul><li><code>IGNORE</code>：忽略异常</li><li><code>WARN</code>：打印警告日志</li><li><code>THROW</code>：抛出异常</li></ul></li></ul><p>在该配置文件中指定的策略，属于系统默认策略，如果在类型配置的关联关系中指定 <code>exceptionStrategy</code> 时，则后者优先级更高。</p>`,7),u=a('<h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> redis</h3><blockquote><p>该配置下属于 Redis 插件包中的配置，使用的前提是引入了 <code>easy-relation-redis</code> 模块。</p></blockquote><h4 id="key-prefix" tabindex="-1"><a class="header-anchor" href="#key-prefix" aria-hidden="true">#</a> key-prefix</h4><ul><li>描述：缓存 key 的前缀</li><li>类型：<code>String</code></li><li>默认值：<code>null</code></li></ul><h4 id="serialize-type" tabindex="-1"><a class="header-anchor" href="#serialize-type" aria-hidden="true">#</a> serialize-type</h4><ul><li>描述：缓存 value 的序列化方式</li><li>类型：<code>RedisSerializeTypeEnum</code> 枚举</li><li>默认值：<code>JACKSON</code></li><li>可选值： <ul><li><code>JDK</code>：使用 JDK 序列化方式</li><li><code>JACKSON</code>：使用 Jackson 序列化方式</li></ul></li></ul>',6);function y(B,h){const s=r("RouterLink");return n(),i("div",null,[p,o("p",null,[e("具体示例可以参考"),c(s,{to:"/guide/configure-relation.html#%E8%BD%AC%E6%8D%A2%E5%BC%82%E5%B8%B8"},{default:t(()=>[e("配置关联关系#转换异常")]),_:1})]),u])}const m=l(d,[["render",y],["__file","configuration.html.vue"]]);export{m as default};
